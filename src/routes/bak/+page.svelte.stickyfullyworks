<script lang="ts">
    // import { rawData } from "$lib/data";
    let indexName: string = "playerPack2024regularSeason";
    import { rawData } from "$lib/playerPacks/playerPack2024allStar";
    import { rawIDs as rawPlayerIDs } from "$lib/playerIDs";
    import { rawIDs as rawTeamIDs } from "$lib/teamIDs";

    import { getPlayerID, getTeamID, getTeamName } from "$lib/getIDs";

    import { send, receive } from "$lib/transition";
    import { writable, type Writable } from "svelte/store";
    import { addRecords } from "$lib/algoliaAddRecord";

    import { searchClient } from "$lib/algolia/algoliaClient";

    interface Player {
        name: string;
        team: string;
        age: number;

        fgm: number;
        fga: number;
        fgp: number | null;

        img: string;
    }

    function getFGM(playerData: string[]): number {
        let FGM: number = 0;
        for (let i = 1; i < playerData.length / 3; i++)
            FGM += parseFloat(playerData[3 * i]);
        return FGM;
    }

    function getFGA(playerData: string[]): number {
        let FGA: number = 0;
        for (let i = 1; i < playerData.length / 3; i++)
            FGA += parseFloat(playerData[3 * i + 1]);
        return FGA;
    }

    function getFGP(playerData: string[]): number {
        let FGP: number = 0;
        if (getFGM(playerData) / getFGA(playerData))
            FGP =
                Math.round((getFGM(playerData) / getFGA(playerData)) * 1000) /
                10;
        return FGP;
    }

    // allData includes headers
    const allData: string[] = rawData.split("\n");
    let players: Player[] = [];

    // does not include headers
    const playersData: string[] = allData.slice(2);

    const playerIDs: string[] = rawPlayerIDs.split("\n");
    const teamIDs: string[] = rawTeamIDs.split("\n");

    let i = 0;
    let j = 0;
    while (i < playersData.length) {
        const playerData: string[] = playersData[i].split(",");
        if (getPlayerID(playerData[0]) != "") {
            let player: Player = {
                name: playerData[0],
                team: playerData[1],
                age: parseInt(playerData[2]),

                fga: getFGA(playerData),
                fgm: getFGM(playerData),
                fgp: getFGP(playerData),

                img:
                    "https://cdn.nba.com/headshots/nba/latest/1040x760/" +
                    getPlayerID(playerData[0]) +
                    ".png",
            };
            players[j] = player;
            j++;
        }
        i++;
    }

    let userPlayer: Player = {
        name: "Leo Liang",
        team: "TOR",
        age: 12,

        fga: 0,
        fgm: 0,
        fgp: null,

        img: "src/lib/leo-nba.png",
    };

    players.push(userPlayer);
    quickSortPlayers(players, 0, players.length - 1);

    // players = quickSortPlayers(players, 0, players.length - 1);

    const { subscribe, update }: Writable<Player[]> = writable(players);

    const playersStore = {
        subscribe,
        addOneUserScore: () => {
            userPlayer = {
                ...userPlayer,
                fga: userPlayer.fga + 1,
                fgm: userPlayer.fgm + 1,
                fgp:
                    Math.round(
                        ((userPlayer.fgm + 1) / (userPlayer.fga + 1)) * 1000
                    ) / 10,
            };
            update((p) => [
                ...p.filter((p) => p.name !== userPlayer.name),
                userPlayer,
            ]);
            console.log({ players, userPlayer });

            update((p) => quickSortPlayers(p, 0, p.length - 1));
        },
        addZeroUserScore: () => {
            userPlayer = {
                ...userPlayer,
                fga: userPlayer.fga + 1,
                fgm: userPlayer.fgm,
                fgp:
                    Math.round((userPlayer.fgm / (userPlayer.fga + 1)) * 1000) /
                    10,
            };
            update(($players) => [
                ...$players.filter((p) => p.name !== userPlayer.name),
                userPlayer,
            ]);
            console.log({ players, userPlayer });

            update((p) => quickSortPlayers(p, 0, p.length - 1));
            $playersStore = $playersStore;
        },

        remove: (player: Player) => {
            update(($players) =>
                $players.filter((p) => p.name !== player.name)
            );
        },
    };

    function quickSortPlayers(
        players: Player[],
        left: number,
        right: number
    ): Player[] {
        let l = left;
        let r = right;

        let p = players[Math.floor((l + r) / 2)].fgp;

        while (l <= r) {
            while (players[l].fgp > p) {
                l++;
            }
            while (players[r].fgp < p) {
                r--;
            }

            if (l <= r) {
                [players[l], players[r]] = [players[r], players[l]];
                l++;
                r--;
            }
        }
        if (left < r) quickSortPlayers(players, left, r);
        if (l < right) quickSortPlayers(players, l, right);

        return players;

        // players = players;
        // update(($players) => players);
    }

    // console.log(players);

    // let indexName: string = 'players-2024-playoffs';
    // addRecords(players, indexName);

    // let userIndexName: string = 'user-index-0';

    export { Player };
</script>


<div class="fixed top-0 start-0 justify-between w-full border-t border-gray-200 bg-gray-50 dark:bg-gray-700 dark:border-gray-600 text-xs">
    <div class="flex bg-gray-200 px-2 py-3">
        <div class="w-5/12 text-gray-700 text-left">Ballin</div>
        <div class="w-5/12 flex justify-end items-center">
            <p class="w-8 px-2 text-center">FGM</p>
            <p class="w-8 px-2 text-center">FGA</p>
        </div>
        <div class="w-1/6 text-gray-700 text-right">FGP%</div>
    </div>
</div>

<div class="mx-auto max-w-md rounded overflow-hidden text-xs">
    <div class="flex bg-gray-200 px-2 py-3">
        <div class="w-1/6 text-gray-700 text-right">Placeholder</div>
    </div>
</div>

<div class="mx-auto max-w-md rounded overflow-hidden shadow-md text-xs">
    {#each $playersStore as player (player?.name)}
        <div class="flex px-2 py-2 items-center {player.name == userPlayer.name ? "bg-orange-100" : ""}">
            <div class="w-3/4 flex">
                {#if player.name != userPlayer.name}
                    <img
                        class="w-10 h-10 mr-2 self-center object-cover rounded-full"
                        src="https://cdn.nba.com/headshots/nba/latest/1040x760/{getPlayerID(
                            player.name
                        )}.png"
                        alt="player?.name"
                    />
                {:else}
                    <img
                        src="src/lib/leo-nba.png"
                        class="w-10 h-10 mr-2 self-center object-cover rounded-full"
                        alt="User"
                    />
                {/if}
                <img
                    class="w-10 h-10 mr-2 self-center object-cover rounded-full"
                    alt="away-logo"
                    src="https://cdn.nba.com/logos/nba/{getTeamID(
                        player.team
                    )}/primary/L/logo.svg"
                />
                <div class="flex flex-col">
                    <p class="text-sm font-bold">{player?.name}</p>
                    <p class=" text-gray-600">
                        {getTeamName(player?.team)
                            .split("-")
                            .map((word) => {
                                return (
                                    word[0].toUpperCase() + word.substring(1)
                                );
                            })
                            .join(" ")}
                    </p>
                    <p class=" text-gray-600">
                        {player?.team}
                    </p>
                </div>
            </div>
            <div class="w-5/12 flex justify-end items-center">
                <p class="w-8 px-1 text-center">
                    {Boolean(player?.fgm) ? player?.fgm : "-"}
                </p>
                <p class="w-8 px-1 text-center">
                    {Boolean(player?.fga) ? player?.fga : "-"}
                </p>
            </div>
            <p class="w-1/6 text-lg sm:text-xl font-bold text-right">
                {Boolean(player?.fgp) ? player?.fgp?.toFixed(1) : "-"}
            </p>
        </div>
    {/each}
</div>

<div class="flex border-t bg-gray-200">
    <div class="w-1/2 px-2 py-2 text-center">
        <p class="text-gray-600">
            <button>Placeholder
                <p class="font-light text-gray-600">
                    Placeholder
                </p></button
            >
        </p>
    </div>
</div>

<div id="bottom-banner" tabindex="-1" class="fixed bottom-0 start-0 z-50 flex justify-between w-full  border-t border-gray-200 bg-gray-50 dark:bg-gray-700 dark:border-gray-600">
    <div class="w-1/2 px-2 py-2 text-center">
        <button
            on:click={() => playersStore.addOneUserScore()}
            class="font-semibold text-gray-700"
            >+ 1
            <p class="font-light text-gray-600">
                {(
                    Math.round(
                        ((userPlayer.fgm + 1) / (userPlayer.fga + 1)) * 1000
                    ) / 10
                ).toFixed(1)}
            </p>
        </button>
    </div>
    <div class="w-1/2 px-2 py-2 text-center">
        <p class="text-gray-600">
            <button
                on:click={() => playersStore.addZeroUserScore()}
                class="font-semibold"
                >+ 0
                <p class="font-light text-gray-600">
                    {(
                        Math.round(
                            (userPlayer.fgm / (userPlayer.fga + 1)) * 1000
                        ) / 10
                    ).toFixed(1)}
                </p></button
            >
        </p>
    </div>
</div>


<!-- src="https://a1.espncdn.com/combiner/i?img=/i/teamlogos/nba/500/scoreboard/{player.team.toLowerCase()}.png&h=70&w=70" -->

<!-- <style>
	button {
		background-image: url($lib/remove.svg);
	}
</style> -->
